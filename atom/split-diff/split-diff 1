# Welcome to CCI!!!

## Setting up a Local Environment

The following links describe scrubbing and the Network VM:

* [Scrubbing](https://confluence.acquia.com/x/HIAS#WorkingontheNetworkTeam-Networksiteworkflowsandscrubbing)
* [Network VM](https://confluence.acquia.com/x/HIAS#WorkingontheNetworkTeam-Developinglocallywiththevirtualmachine)

Full instructions for setting up the VM are provided in the repo README:

* https://github.com/acquia/network-vm/

You may find that the Network VM is quite heavy for a Macbook Air, since it reserves 4G of memory. Just note that you'll have to limit concurrent applications when working with the VM. The nice thing about using the VM is that it's well supported, sets up connections between a fleet of Network '.dev' sites, is fully isolated from sending mail, and handles DB scrubbing for you. There's also a channel dedicated to VM support - _Network VM_.

Building CCI locally in Dev Desktop (or another stack) would be prohibitive for a few reasons. If you managed to get all the hosting dependencies in place, you would still see a lot of errors for missing services in `drush` or with page loads. There is also a chance that emails could be sent out unless you take steps to guard against this.

**Note:** If you need to connect to a Hosting Master for testing from CCI, use the following process:

```
drush @cci.vm vset acquia_rpc_master_class CciCloudTestAcquiaFieldsMaster
```

If `docroot/sites/all/modules/custom/cci_cloud/tests/CciCloudTestAcquiaFieldsMaster.inc` doesn't have a response you need, get a response directly from Prod with `drush scr` and then add it to the `CciCloudTestAcquiaFieldsMaster` class.

## Code Repository and Update Flow

You'll want to clone from and push to the CCI Acquia Repo:

* cci@svn-182.network.hosting.acquia.com:cci.git

For any updates, start by creating a new branch off of `master` and push your changes up to the CCI Acquia repo. There is a Jenkins task running every 5 minutes to sync updates one-way from Acquia to Github (https://github.com/acquia/network-cci). Once your changes make it to Github, the test suite will be run in Travis (https://travis-ci.com/acquia/network-cci/branches).

## Manual Review

There are a number of 'team' environments in CCI available for testing. For team1-team5 environments, if you see the `master` branch deployed, you can generally just use the environment. Note that cciteam1 has a PHP memory limit that matches Prod (384M). Other team environments are at 128M. team6 is special, in that service connectivity to other Network 'team6' sites is maintained. If you want to use this environment for testing, shout out to the _nn-bz-general_ channel in Hipchat to let people know.

## Code Review

Once your changes are completed, open a new Pull Request on the Github CCI repo and invite the following Github users to review:

@gcassie @andrewyang @chris-hamper @martinhej @nhoag

When you have 2-3 approvals, you can move ahead to release phase. At this point, one of the BizEng folks may take over to perform the release, but here's the full documentation for reference:

* https://confluence.acquia.com/x/fyf0

**Note**: We don't merge code updates to CCI in the Github UI. Just mentioning this here, since it's a different practice from `support-cli`.

## Wrapping Up

I think that covers all the basics for getting up and running with CCI dev. As George mentioned in the meeting, you'll want to reference the `cci_comm` module - sounds like there's already some familiarity with this. You'll also want to reference the `cci_rest` module. Lastly, the `acquia_lib` module provides a lot of helper methods that you will likely find handy.

Feel free to ping me if you have any questions, or if you run into any issues with set-up.
